{"version":3,"sources":["components/editor/editor.component.jsx","components/previewer/previewer.component.jsx","components/header/header.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Editor","text","handleChange","className","action","name","id","cols","rows","value","onChange","renderer","marked","Renderer","Previewer","dangerouslySetInnerHTML","__html","Header","props","placeholder","App","useState","setText","setOptions","breaks","gfm","event","console","log","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+VAYeA,G,MARA,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,aAAR,OACX,yBAAKC,UAAU,oBACX,0BAAMC,OAAO,IACX,8BAAUC,KAAK,OAAOC,GAAG,SAASC,KAAK,KAAKC,KAAK,KAAKC,MAAOR,EAAMS,SAAUR,QCHjFS,G,MAAW,IAAIC,IAAOC,UAObC,EANG,SAAC,GAAD,IAAEb,EAAF,EAAEA,KAAF,OACd,6BACI,yBAAKK,GAAG,UAAUS,wBAA0B,CAACC,OAAQJ,IAAOX,EAAM,CAACU,SAAUA,SCAtEM,G,MAJA,SAACC,GAAD,OACX,yBAAKf,UAAU,UAAUe,EAAMjB,QCgCnC,IAAMkB,EAAW,wsCAkDFC,EA/Ef,WAAgB,IAAD,EACWC,mBAASF,GADpB,mBACNlB,EADM,KACAqB,EADA,KAab,OAVAV,IAAOW,WAAW,CAChBC,QAAQ,EACRC,KAAK,IASL,yBAAKtB,UAAU,OACZ,wBAAIA,UAAU,WAAd,4BACA,yBAAKA,UAAU,WACf,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAQF,KAAK,SAASE,UAAU,iBAChC,kBAAC,EAAD,CAAQF,KAAMA,EAAMC,aAVN,SAACwB,GACpBC,QAAQC,IAAIF,EAAMG,OAAOpB,OACzBa,EAAQI,EAAMG,OAAOpB,WAUlB,6BACE,kBAAC,EAAD,CAAQR,KAAK,cACb,kBAAC,EAAD,CAAWA,KAAMA,QClBN6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.e09dd8d7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./editor.styles.css\";\n\n\nconst Editor = ({text, handleChange}) => (\n    <div className=\"editor-component\">\n        <form action=\"\">\n          <textarea name=\"text\" id=\"editor\" cols=\"60\" rows=\"15\" value={text} onChange={handleChange} />\n        </form>  \n    </div>\n)\n\nexport default Editor;","import React from 'react';\nimport marked from 'marked';\nimport \"./previewer.styles.css\";\n\nconst renderer = new marked.Renderer()\nconst Previewer = ({text}) => (\n    <div>\n        <div id=\"preview\" dangerouslySetInnerHTML= {{__html: marked(text, {renderer: renderer})}} />      \n    </div>\n)\n\nexport default Previewer;","import React from 'react';\nimport './header.styles.css';\n\nconst Header = (props) => (\n    <div className=\"header\">{props.text}</div>\n)\n\nexport default Header;","import React, { useState } from 'react';\nimport './App.css';\nimport marked from \"marked\";\nimport Editor from './components/editor/editor.component';\nimport Previewer from './components/previewer/previewer.component';\nimport Header from './components/header/header.component';\n\nfunction App() {\n  const [text, setText] = useState(placeholder)\n\n  marked.setOptions({\n    breaks: true,\n    gfm: true\n  })\n\n\n  const handleChange = (event) => {\n    console.log(event.target.value)\n    setText(event.target.value)\n  }\n  return (\n    <div className=\"App\">\n       <h1 className=\"heading\">React Markdown Previewer</h1>\n       <div className=\"AppWrap\">\n       <div className=\"editorWrap\">\n         <Header text=\"Editor\" className=\"editorHeader\" />\n         <Editor text={text} handleChange={handleChange}/>\n       </div>\n       <div>\n         <Header text=\"Previewer\" />\n         <Previewer text={text} />\n       </div>\n       </div>\n       </div>\n  );\n}\nconst placeholder = `\n# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\n You can also make text **bold**... whoa!\n Or _italic_.\n Or... wait for it... **_both!_**\n And feel free to go crazy ~~crossing stuff out~~.\n\n There's also [links](https://www.freecodecamp.com), and\n > Block Quotes!\n\n And if you want to get really crazy, even tables:\n\n Wild Header | Crazy Header | Another Header?\n ------------ | ------------- | ------------- \n Your content can | be here, and it | can be here....\n And here. | Okay. | I think we get it.\n\n - And of course there are lists.\n   - Some are bulleted.\n      - With different indentation levels.\n         - That look like this.\n\n\n 1. And there are numbererd lists too.\n 1. Use just 1s if you want! \n 1. But the list goes on...\n - Even if you use dashes or asterisks.\n * And last but not least, let's not forget embedded images:\n\n ![React Logo w/ Text](https://goo.gl/Umyytc)\n `\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}